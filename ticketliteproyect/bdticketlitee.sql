-- This script was generated by the ERD tool in pgAdmin 4.
-- Please log an issue at https://github.com/pgadmin-org/pgadmin4/issues/new/choose if you find any bugs, including reproduction steps.
BEGIN;


CREATE TABLE IF NOT EXISTS public.event_analytics
(
    id bigserial NOT NULL,
    event_id bigint,
    total_views integer DEFAULT 0,
    total_registrations integer DEFAULT 0,
    total_tickets_sold integer DEFAULT 0,
    satisfaction_avg numeric(3, 2) DEFAULT 0,
    CONSTRAINT event_analytics_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.events
(
    id bigserial NOT NULL,
    name character varying(255) COLLATE pg_catalog."default" NOT NULL,
    description character varying(255) COLLATE pg_catalog."default" NOT NULL,
    start_date date,
    end_date date,
    location character varying(255) COLLATE pg_catalog."default" NOT NULL,
    category character varying(100) COLLATE pg_catalog."default" NOT NULL,
    status event_status NOT NULL DEFAULT 'Publicado'::event_status,
    image_url character varying(255) COLLATE pg_catalog."default",
    created_at timestamp without time zone NOT NULL DEFAULT CURRENT_TIMESTAMP,
    id_events bigint NOT NULL GENERATED BY DEFAULT AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 9223372036854775807 CACHE 1 ),
    CONSTRAINT events_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.notifications
(
    id bigserial NOT NULL,
    user_id bigint NOT NULL,
    event_id bigint,
    message_content text COLLATE pg_catalog."default" NOT NULL,
    type character varying(50) COLLATE pg_catalog."default" DEFAULT 'General'::character varying,
    is_read boolean DEFAULT false,
    created_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT notifications_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.payments
(
    id bigserial NOT NULL,
    registration_id bigint NOT NULL,
    method character varying(100) COLLATE pg_catalog."default",
    amount numeric(10, 2),
    status payment_status DEFAULT 'Pendiente'::payment_status,
    paid_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT payments_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.registrations
(
    id bigserial NOT NULL,
    user_id bigint NOT NULL,
    event_id bigint NOT NULL,
    ticket_type character varying(100) COLLATE pg_catalog."default",
    price numeric(10, 2),
    status registration_status DEFAULT 'Confirmado'::registration_status,
    reminder_delivery_status reminder_status DEFAULT 'Recordado'::reminder_status,
    registered_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    reminder_time timestamp without time zone,
    CONSTRAINT registrations_pkey PRIMARY KEY (id),
    CONSTRAINT unique_registration UNIQUE (user_id, event_id)
);

CREATE TABLE IF NOT EXISTS public.sessions
(
    id bigserial NOT NULL,
    event_id bigint NOT NULL,
    title character varying(255) COLLATE pg_catalog."default" NOT NULL,
    description text COLLATE pg_catalog."default",
    start_time timestamp without time zone,
    end_time timestamp without time zone,
    speaker_name character varying(255) COLLATE pg_catalog."default",
    speaker_bio text COLLATE pg_catalog."default",
    CONSTRAINT sessions_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.tickets
(
    id bigserial NOT NULL,
    registration_id bigint NOT NULL,
    issued_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    qr_code text COLLATE pg_catalog."default",
    CONSTRAINT tickets_pkey PRIMARY KEY (id),
    CONSTRAINT unique_ticket_per_registration UNIQUE (registration_id)
);

CREATE TABLE IF NOT EXISTS public.users
(
    id bigserial NOT NULL,
    email character varying(255) COLLATE pg_catalog."default" NOT NULL,
    password_hash text COLLATE pg_catalog."default" NOT NULL,
    first_name character varying(100) COLLATE pg_catalog."default" NOT NULL,
    last_name character varying(100) COLLATE pg_catalog."default",
    phone character varying(20) COLLATE pg_catalog."default" NOT NULL,
    city character varying(100) COLLATE pg_catalog."default",
    bio text COLLATE pg_catalog."default",
    avatar_url text COLLATE pg_catalog."default",
    role user_role DEFAULT 'Usuario'::user_role,
    created_at timestamp without time zone NOT NULL DEFAULT CURRENT_TIMESTAMP,
    updated_at timestamp without time zone NOT NULL DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT users_pkey PRIMARY KEY (id),
    CONSTRAINT users_email_key UNIQUE (email)
);

ALTER TABLE IF EXISTS public.event_analytics
    ADD CONSTRAINT event_analytics_event_id_fkey FOREIGN KEY (event_id)
    REFERENCES public.events (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;


ALTER TABLE IF EXISTS public.notifications
    ADD CONSTRAINT notifications_event_id_fkey FOREIGN KEY (event_id)
    REFERENCES public.events (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE SET NULL;


ALTER TABLE IF EXISTS public.notifications
    ADD CONSTRAINT notifications_user_id_fkey FOREIGN KEY (user_id)
    REFERENCES public.users (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;


ALTER TABLE IF EXISTS public.payments
    ADD CONSTRAINT payments_registration_id_fkey FOREIGN KEY (registration_id)
    REFERENCES public.registrations (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;


ALTER TABLE IF EXISTS public.registrations
    ADD CONSTRAINT registrations_event_id_fkey FOREIGN KEY (event_id)
    REFERENCES public.events (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;


ALTER TABLE IF EXISTS public.registrations
    ADD CONSTRAINT registrations_user_id_fkey FOREIGN KEY (user_id)
    REFERENCES public.users (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;


ALTER TABLE IF EXISTS public.sessions
    ADD CONSTRAINT sessions_event_id_fkey FOREIGN KEY (event_id)
    REFERENCES public.events (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;


ALTER TABLE IF EXISTS public.tickets
    ADD CONSTRAINT tickets_registration_id_fkey FOREIGN KEY (registration_id)
    REFERENCES public.registrations (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;
CREATE INDEX IF NOT EXISTS unique_ticket_per_registration
    ON public.tickets(registration_id);

END;